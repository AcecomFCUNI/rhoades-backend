{
  "openapi": "3.0.0",
  "info": {
    "title": "Rhoades backend",
    "description": "This is documentation of Rhoades backend.",
    "contact": {
      "email": "acecom.soporte@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "0.43.0"
  },
  "servers": [
    {
      "url": "https://acecom-rhoades-dev.herokuapp.com/api/",
      "description": "Rhoades dev API"
    },
    {
      "url": "http://54.227.226.104:3000/api/",
      "description": "Rhoades AWS dev API"
    },
    {
      "url": "https://acecom-rhoades.herokuapp.com/api/",
      "description": "Rhoades prod API"
    }
  ],
  "tags": [
    {
      "name": "user",
      "description": "Operations about a teacher or student that belongs to the CEUNI's electoral roll"
    },
    {
      "name": "list",
      "description": "Operations about a list performed by a registered user"
    }
  ],
  "paths": {
    "/user/verify/{code}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "verifyUser",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The user code or document number.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "0 for documentNumber or 1 for UNI code.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the user belongs to the patten.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyUserResponse"
                }
              }
            }
          },
          "404": {
            "description": "Teacher or student not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request format.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/user/notify": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Sends the corresponding password to the user that has been registered.",
        "operationId": "notifyUser",
        "requestBody": {
          "$ref": "#/components/requestBodies/DtoUserWithGender"
        },
        "responses": {
          "200": {
            "description": "The user has been successfully registered and notified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccess"
                }
              }
            }
          },
          "404": {
            "description": "Teacher or student not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/user/enroll/{code}": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Enrolls a user into a list.",
        "operationId": "enrollUser",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "The user code or document number.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "example": "20201001A"
            }
          },
          {
            "name": "documentType",
            "in": "query",
            "description": "0 for documentNumber or 1 for UNI code.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "integer",
              "enum": [
                0,
                1
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DtoListWithIdAndOwner"
        },
        "responses": {
          "200": {
            "description": "The user has been successfully registered and notified.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrollUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "The user who is trying to enroll a user is not registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "403": {
            "description": "The procurator who is trying to enroll a user is not he owner of the list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "404": {
            "description": "Teacher or student not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "409": {
            "description": "The user is already registered or postulating, or the list is closed, or is trying to register himself.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/user/user/setCommitteeMembers": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Register the electoral committee.",
        "operationId": "setCommitteeMembers",
        "requestBody": {
          "$ref": "#/components/requestBodies/DtoIdUsers"
        },
        "responses": {
          "200": {
            "description": "The committee members were successfully registered.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccess"
                }
              }
            }
          },
          "409": {
            "description": "The user is a procurator or is postulating",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "Invalid request format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/list/createList": {
      "post": {
        "tags": [
          "list"
        ],
        "summary": "Create a list to postulate.",
        "operationId": "createList",
        "parameters": [
          {
            "name": "faculty",
            "in": "query",
            "description": "Faculty of the list, it must provided for the following type of list: dean, third-of-faculty and faculty-council.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "FIIS",
                "FIP",
                "FC",
                "FIEE",
                "FIGMM",
                "FIEECS",
                "FIC",
                "FAUA",
                "FIA",
                "FIQT",
                "FIM"
              ]
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/DtoListWithoutId"
        },
        "responses": {
          "201": {
            "description": "The list has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateListResponse"
                }
              }
            }
          },
          "401": {
            "description": "The user is not registered as procurator.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "403": {
            "description": "The user is trying to enroll a list that is from a faculty different from his.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "404": {
            "description": "The user is not in the electoral roll.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "409": {
            "description": "The user has already 2 lists registered, or has already registered a teachers or students list.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "Not a valid list type.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/list/getListsOfUser/{id}": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Get all the list that a user has registered.",
        "operationId": "getListsOfUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Firebase user id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of users has been provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListOfUserResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/list/finishRegistration": {
      "patch": {
        "tags": [
          "list"
        ],
        "summary": "Finish list registration.",
        "operationId": "finishRegistration",
        "requestBody": {
          "$ref": "#/components/requestBodies/DtoListWithIdAndOwner"
        },
        "responses": {
          "200": {
            "description": "The list has finished its registration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultSuccess"
                }
              }
            }
          },
          "403": {
            "description": "A user is trying to modify a list that does not belong to him.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "404": {
            "description": "The list does not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "409": {
            "description": "The list has already finished is registration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "422": {
            "description": "There is an error in the payload structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    },
    "/list/filter": {
      "get": {
        "tags": [
          "list"
        ],
        "summary": "Filter the lists by faculty and type.",
        "operationId": "filter",
        "parameters": [
          {
            "name": "faculty",
            "in": "query",
            "description": "Faculty of the list, it must provided for the following type of list: dean, third-of-faculty and faculty-council.",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "FIIS",
                "FIP",
                "FC",
                "FIEE",
                "FIGMM",
                "FIEECS",
                "FIC",
                "FAUA",
                "FIA",
                "FIQT",
                "FIM"
              ]
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "List type.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string",
              "enum": [
                "dean",
                "faculty-council",
                "rector",
                "university-assembly",
                "third-of-faculty",
                "university-third-assembly",
                "university-third-council"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the lists that satisfies the condition.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Lists"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DefaultError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "UNICode": {
            "type": "string"
          },
          "documentNumber": {
            "type": "string",
            "description": "Number of DNI, CE or others"
          },
          "documentType": {
            "type": "string",
            "description": "DNI, CE or others"
          },
          "faculty": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Firestore id."
          },
          "lastName": {
            "type": "string"
          },
          "mail": {
            "type": "string",
            "description": "UNI mail registered in the pattern"
          },
          "names": {
            "type": "string"
          },
          "optionalMail": {
            "type": "string"
          },
          "postulating": {
            "type": "boolean"
          },
          "registered": {
            "type": "boolean",
            "description": "Whether the user is registered in the platform.",
            "default": false
          },
          "secondLastName": {
            "type": "string"
          },
          "specialty": {
            "type": "string"
          }
        }
      },
      "List": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "applicants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "owner": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Lists": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/List"
        }
      },
      "EmptyList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "applicants": {
            "type": "array",
            "items": {},
            "default": []
          },
          "owner": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "VerifyUserResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "type": "object",
                "properties": {
                  "condition": {
                    "type": "string",
                    "enum": [
                      "student",
                      "teacher"
                    ]
                  },
                  "gender": {
                    "type": "string",
                    "enum": [
                      "F",
                      "M"
                    ]
                  },
                  "id": {
                    "type": "string",
                    "description": "Firestore id."
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "mail": {
                    "type": "string",
                    "description": "UNI mail or optional mail registered in the pattern"
                  },
                  "names": {
                    "type": "string"
                  },
                  "registered": {
                    "type": "boolean",
                    "description": "Whether the user is registered in the platform.",
                    "default": false
                  },
                  "secondLastName": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "EnrollUserResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "CreateListResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "$ref": "#/components/schemas/EmptyList"
              }
            }
          }
        }
      },
      "GetListOfUserResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "type": "object",
                "properties": {
                  "students": {
                    "$ref": "#/components/schemas/List"
                  },
                  "teachers": {
                    "$ref": "#/components/schemas/List"
                  }
                }
              }
            }
          }
        }
      },
      "DefaultSuccess": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": false
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        }
      },
      "DefaultError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "boolean",
            "default": true
          },
          "message": {
            "type": "object",
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "requestBodies": {
      "SimpleDtoUser": {
        "description": "User id from Firebase",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Firebase id"
                    }
                  }
                }
              }
            }
          }
        },
        "required": true
      },
      "DtoIdUsers": {
        "description": "Array with the UNI codes of the members of the electoral Committee",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "DtoUserWithGender": {
        "description": "Payload to notify the user",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Firebase id"
                    },
                    "gender": {
                      "type": "string",
                      "description": "User gender",
                      "enum": [
                        "F",
                        "M"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "SimpleDtoList": {
        "description": "List id from Firebase",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Firebase id"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DtoListWithoutId": {
        "description": "Owner and type of the list",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "description": "Firestore id"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "dean",
                        "faculty-council",
                        "rector",
                        "university-assembly",
                        "third-of-faculty",
                        "university-third-assembly",
                        "university-third-council"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "DtoListWithIdAndOwner": {
        "description": "Owner and id list",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "args": {
                  "type": "object",
                  "properties": {
                    "owner": {
                      "type": "string",
                      "description": "Firebase user id"
                    },
                    "id": {
                      "type": "string",
                      "description": "Firebase list id"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}